var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PartonDensity]","category":"page"},{"location":"api/#PartonDensity._fun_xsec_i-Tuple{Any, Any}","page":"API","title":"PartonDensity._fun_xsec_i","text":"_fun_xsec_i(ix iq)\n\nInput function for cross section spline. Must be wrapped for interface to SPLINT.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.dd_xsecnc_xq2-Tuple{Array{Float64, N} where N, Array{Float64, N} where N}","page":"API","title":"PartonDensity.dd_xsecnc_xq2","text":"dd_xsecnc_xq2(x_bin_cen, q2_bin_cen)\n\nDouble differential cross section for all x and  q2 bins. NB: modifications needed to include pol and order.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.dd_xsecnc_xq2_i-NTuple{5, Float64}","page":"API","title":"PartonDensity.dd_xsecnc_xq2_i","text":"dd_xsecnc_xq2_i(x, q2)\n\nDouble differential cross section for single  x and q2 values.  NB: modifications needed to include pol and order.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.f2_lo-Tuple{Float64, Float64}","page":"API","title":"PartonDensity.f2_lo","text":"f2_lo(x, q2)\n\nCalculate the f2_lo structure function term.  To be run after the evolution of PDFs with QCDNUM.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.fl_lo-Tuple{Float64, Float64}","page":"API","title":"PartonDensity.fl_lo","text":"fl_lo(x, q2)\n\nCalculate the fl_lo structure function term. To be run after the evolution of PDFs with QCDNUM.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.int_xtotx-Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Array{Float64, N} where N}","page":"API","title":"PartonDensity.int_xtotx","text":"    int_xtotx(λ_u, λ_d, λ_g1, λ_g2, K_g, λ_q, θ)\n\nTotal integrated momentum density. Should equal 1.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.nc_propagator-Tuple{Float64, Float64}","page":"API","title":"PartonDensity.nc_propagator","text":"nc_propagator(q2, x)\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.rxsecnc_xq2-Tuple{Array{Float64, N} where N, Array{Float64, N} where N}","page":"API","title":"PartonDensity.rxsecnc_xq2","text":"rxsecnc_xq2(x, q2)\n\nReduced cross section for all bins.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.rxsecnc_xq2_i-NTuple{5, Float64}","page":"API","title":"PartonDensity.rxsecnc_xq2_i","text":"rxsecnc_xq2_i(x, q2)\n\nReduced cross section for single x, q2.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.x_dv_x-Tuple{Float64, Float64, Float64}","page":"API","title":"PartonDensity.x_dv_x","text":"x_dv_x(x, λ_d, w)\n\nMomentum density of d valence component. Beta function     Ad x^λd (1 - x)^Kd Ad and K_d are set by the passed weight, w\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.x_g_x-NTuple{6, Float64}","page":"API","title":"PartonDensity.x_g_x","text":"    x_g_x(x, λ_g1, λ_g2, K_g, w1, w2)\n\nMomentum density of gluon component.     Ag1 x^λg1 (1 - x)^Kg + Ag2 x^λ_g2 Amplitudes are set by weights w1 and w2.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.x_q_x-Tuple{Float64, Float64, Float64}","page":"API","title":"PartonDensity.x_q_x","text":"x_q_x(x, λ_q, w)\n\nMomentum density of non-valence quark component.     Aq x^λq Amplitude is set by weight w\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.x_uv_x-Tuple{Float64, Float64, Float64}","page":"API","title":"PartonDensity.x_uv_x","text":"x_uv_x(x, λ_u, w)\n\nMomentum density of u valence component. Beta function      Au x^λu (1-x)^Ku Au and K_u are set by the passed weight,  w. \n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.xf3_lo-Tuple{Float64, Float64}","page":"API","title":"PartonDensity.xf3_lo","text":"xf3_lo(x, q2)\n\nCalculate the xf3_lo structure function term. To be run after the evolution of PDFs with QCDNUM.\n\n\n\n\n\n","category":"method"},{"location":"api/#PartonDensity.xtotx-Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Array{Float64, N} where N}","page":"API","title":"PartonDensity.xtotx","text":"x_total_x(x, λ_u, λ_d, λ_g1, λ_g2, K_g, λ_q, θ)\n\nTotal momentum density.\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Forward-model","page":"Examples","title":"Forward model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here, we go through an example of simulating the full forward model, from the prior definition to the expected number of events in different bins of the detector response.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using QCDNUM, PartonDensity \nusing Distributions, Plots, Random, Printf, NaNMath\npd = PartonDensity;","category":"page"},{"location":"examples/#Defining-the-input-PDFS","page":"Examples","title":"Defining the input PDFS","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We start by defining the input PDFs based on our prior model.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"seed = 5\nRandom.seed!(seed);\ndirichlet = Dirichlet([4., 4., 50., 0.5, 5., 5., 3., 2., 1.])\ninput_random_dirichlet = rand(dirichlet)\n\nhp = NamedTuple{(:λ_u, :λ_d, :λ_g1, :λ_g2, :K_g, :λ_q, :θ)}((0.5, 0.6, -0.37, -0.7, 6., -0.5, input_random_dirichlet));","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can plot these to understand what they look like.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x_grid = range(0.001, stop=1, length=1000)\n\nplot(x_grid, [pd.x_uv_x(x, hp.λ_u, hp.θ[1]) for x in x_grid], label=\"x uv(x)\", lw=3)\nplot!(x_grid, [pd.x_dv_x(x, hp.λ_d, hp.θ[2]) for x in x_grid], label=\"x dv(x)\", lw=3)\nplot!(x_grid, [pd.x_g_x(x, hp.λ_g1, hp.λ_g2, hp.K_g, hp.θ[3], hp.θ[4]) \n        for x in x_grid], label=\"x g(x)\", lw=3)\nplot!(x_grid, [pd.x_q_x(x, hp.λ_q, hp.θ[5]) for x in x_grid], label=\"x ubar(x)\", lw=3)\nplot!(x_grid, [pd.x_q_x(x, hp.λ_q, hp.θ[6]) for x in x_grid], label=\"x dbar(x)\", lw=3)\nplot!(x_grid, [pd.x_q_x(x, hp.λ_q, hp.θ[7]) for x in x_grid], label=\"x s(x)\", lw=3)\nplot!(x_grid, [pd.x_q_x(x, hp.λ_q, hp.θ[8]) for x in x_grid], label=\"x c(x)\", lw=3)\nplot!(x_grid, [pd.x_q_x(x, hp.λ_q, hp.θ[9]) for x in x_grid], label=\"x b(x)\", lw=3)\nplot!(xlabel=\"x\")\nylims!(1e-8, 30)\nplot!(xaxis=:log, yaxis=:log, legend=:outertopright)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The intgeral over these components should equal 1 - let's check that.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"pd.int_xtotx(hp.λ_u, hp.λ_d, hp.λ_g1, hp.λ_g2, hp.K_g, hp.λ_q, hp.θ) ≈ 1","category":"page"},{"location":"examples/#Defining-QCDNUM-grids,-weights-and-settings","page":"Examples","title":"Defining QCDNUM grids, weights and settings","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Next, we use the QCDNUM.jl interface to set things up.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"QCDNUM.qcinit(-6, \" \")\nQCDNUM.setord(2); # 1 <=> LO, 2<=> NLO in pQCD\nQCDNUM.setalf(0.118, 100.0); # α_S = 0.118, μ_R^2 = 100.0\n\n# grid params\niosp = 3; # spline order\nn_x = 100;\nn_q = 50;\n\n# x grid\nxmin = Float64.([1.e-3, 0.75e0]);\niwt = Int32.([1]);\nQCDNUM.gxmake(xmin, iwt, 1, n_x, iosp);\n\n# mu2 grid\nqarr = Float64.([1.e2, 3.e4]);\nwarr = Float64.([1., 1.]);\nngq = 2;\nQCDNUM.gqmake(qarr, warr, ngq, n_q);\n\n# copy locally\nqcdnum_x_grid = QCDNUM.gxcopy(n_x);\nqcdnum_qq_grid = QCDNUM.gqcopy(n_q);\n\nQCDNUM.setcbt(5, 1, 1, 1); # 5 flavours in FFNS\niq0 = QCDNUM.iqfrmq(100.0); # Get index of μ_F^2 = 100.0 = μ_R^2\n\nitype = 1 # Unpolarised\nnw = QCDNUM.fillwt(itype)\nnw = QCDNUM.zmfillw()\n\n@printf(\"Generated grid with size nx = %i, nq = %i.\\n\", n_x, n_q)\n@printf(\"Filled weight tables.\\n\")","category":"page"},{"location":"examples/#Evolve-the-PDFs-using-QCDNUM","page":"Examples","title":"Evolve the PDFs using QCDNUM","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Once this is done, we can define a function to pass out input PDFs to QCDNUM and perform the evolution.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function _input_pdfs(i, x)::Float64\n    i = i[]\n    x = x[]\n    \n    f = 0.0\n    \n    # gluon\n    if (i == 0)\n        f = pd.x_g_x(x, hp.λ_g1, hp.λ_g2, hp.K_g, hp.θ[3], hp.θ[4]) \n    end\n  \n    # u valence\n    if (i == 1)\n        f = pd.x_uv_x(x, hp.λ_u, hp.θ[1])\n    end\n    \n    # d valence\n    if (i == 2)\n        f = pd.x_dv_x(x, hp.λ_d, hp.θ[2])\n    end\n    \n    # ubar\n    if (i == 3)\n        f = pd.x_q_x(x, hp.λ_q, hp.θ[5])\n    end\n    \n    # dbar\n    if (i == 4)\n        f = pd.x_q_x(x, hp.λ_q, hp.θ[6])\n    end\n    \n    # s and sbar\n    if (i == 5) || (i == 6)\n        f = pd.x_q_x(x, hp.λ_q, hp.θ[7])\n    end\n    \n    # c and cbar\n    if (i == 7) || (i == 8)\n        f = pd.x_q_x(x, hp.λ_q, hp.θ[8])\n    end\n    \n    # d and dbar\n    if (i == 9) || (i == 10)\n        f = pd.x_q_x(x, hp.λ_q, hp.θ[9])\n    end\n    \n    return f\nend\n\n# we need to wrap this to pass to Fortran\ninput_pdfs = @cfunction(_input_pdfs, Float64, (Ref{Int32}, Ref{Float64}))\n\n# mapping between your input function and quark species\n#               tb  bb  cb  sb  ub  db  g   d   u   s   c   b   t\nmap = Float64.([0., 0., 0., 0.,-1., 0., 0., 0., 1., 0., 0., 0., 0., # 1 # U valence\n                0., 0., 0., 0., 0.,-1., 0., 1., 0., 0., 0., 0., 0., # 2 # D valence\n                0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., # 3 # u sea\n                0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., # 4 # d sea\n                0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., # 5 # s\n                0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 6 # sbar\n                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., # 7 # c\n                0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 8 # cbar\n                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., # 9 # b\n                0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 10 # bbar\n                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., # 11\n                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]); # 12","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"eps = QCDNUM.evolfg(1, input_pdfs, map, iq0)","category":"page"},{"location":"examples/#Defining-the-necessary-splines-for-the-cross-section-calculation","page":"Examples","title":"Defining the necessary splines for the cross section calculation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We first make splines of the structure functions for fast cross-section calculation.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# For splines\n             # tb  bb  cb  sb  ub  db   g   d   u   s   c   b   t\n             # -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6\ndnv = Float64.([0., 0., 0., 0., 0.,-1., 0., 1., 0., 0., 0., 0., 0.]);\nupv = Float64.([0., 0., 0., 0.,-1., 0., 0., 0., 1., 0., 0., 0., 0.]);\ndel = Float64.([0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0.]);\nuds = Float64.([0., 0., 0., 2., 2., 2., 0., 0., 0., 0., 0., 0., 0.]);\npro = Float64.([4., 1., 4., 1., 4., 1., 0., 1., 4., 1., 4., 1., 4.]) / 9;\nduv = Float64.([0., 0., 0., 0.,-1.,-1., 0., 1., 1., 0., 0., 0., 0.]);\nval = Float64.([-1.,-1.,-1.,-1.,-1.,-1., 0., 1., 1., 1., 1., 1., 1.]);\n\nproup = Float64.([0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0.]);\nprodn = Float64.([0., 1., 0., 1., 0., 1., 0., 1., 0., 1., 0., 1., 0.]);\nvalup = Float64.([0.,0.,-1.,0.,-1.,0., 0., 0., 1., 0., 1., 0., 0.]);\nvaldn = Float64.([0.,-1.,0.,-1.,0.,-1., 0., 1., 0., 1., 0., 1., 0.]);\n\nnuser = 10\nQCDNUM.ssp_spinit(nuser);\nistx = 5;\nistq = 10;\nia = QCDNUM.isp_s2make(istx, istq);\n\nxnd = QCDNUM.ssp_unodes(ia, 100, 0);\nqnd = QCDNUM.ssp_vnodes(ia, 100, 0);\nQCDNUM.ssp_nprint(ia);\nQCDNUM.ssp_erase(ia);","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# set nodes and fill spline with structure function\niaFLup = QCDNUM.isp_s2user(xnd, 100, qnd, 100);\nQCDNUM.ssp_s2f123(iaFLup, 1, proup, 1, 0.0);\n\niaF2up = QCDNUM.isp_s2user(xnd, 100, qnd, 100);\nQCDNUM.ssp_s2f123(iaF2up, 1, proup, 2, 0.0);\n\niaF3up = QCDNUM.isp_s2user(xnd, 100, qnd, 100);\nQCDNUM.ssp_s2f123(iaF3up, 1, valup, 3, 0.0);\n    \niaFLdn = QCDNUM.isp_s2user(xnd, 100, qnd, 100);\nQCDNUM.ssp_s2f123(iaFLdn, 1, prodn, 1, 0.0);\n\niaF2dn = QCDNUM.isp_s2user(xnd, 100, qnd, 100);\nQCDNUM.ssp_s2f123(iaF2dn, 1, prodn, 2, 0.0);\n\niaF3dn = QCDNUM.isp_s2user(xnd, 100, qnd, 100);\nQCDNUM.ssp_s2f123(iaF3dn, 1, valdn, 3, 0.0);\n\n# store spline addresses\nQCDNUM.ssp_uwrite(1, Float64(iaF2up));\nQCDNUM.ssp_uwrite(2, Float64(iaF2dn));\nQCDNUM.ssp_uwrite(3, Float64(iaF3up));\nQCDNUM.ssp_uwrite(4, Float64(iaF3dn));\nQCDNUM.ssp_uwrite(5, Float64(iaFLup));\nQCDNUM.ssp_uwrite(6, Float64(iaFLdn));","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Similarly to the input PDFs, we also have to define a function to calculate the cross section.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function _my_fun_xsec_i(ipx, ipq, first)::Float64\n    \n    ix = ipx[]\n    iq = ipq[]\n    \n    xsec = _fun_xsec_i(ix, iq)\n    \n    return xsec\nend\n\n# wrap to pass to Fortran\nmy_fun_xsec_i = @cfunction(_my_fun_xsec_i, Float64, (Ref{Int32}, Ref{Int32}, Ref{UInt8}))\n\n# fill spline\nistx_2 = 1;\nistq_2 = 2;\nrscut = 370.0;\nrs = 318.0;\n\nset_lepcharge(1)\niaF_7 = QCDNUM.isp_s2make(istx_2, istq_2);\nQCDNUM.ssp_uwrite(7, Float64(iaF_7));\nQCDNUM.ssp_s2fill(iaF_7, my_fun_xsec_i, rscut);\n\nset_lepcharge(-1)\niaF_8 = QCDNUM.isp_s2make(istx_2, istq_2);\nQCDNUM.ssp_uwrite(8, Float64(iaF_8));\nQCDNUM.ssp_s2fill(iaF_8, my_fun_xsec_i, rscut);","category":"page"},{"location":"examples/#Integrate-over-the-cross-section-spline-and-find-expected-event-numbers","page":"Examples","title":"Integrate over the cross section spline and find expected event numbers","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"nbins = size(xbins_M_begin)[1]\nIntXsec_eP = zeros(nbins);\nIntXsec_eM = zeros(nbins);\nfor i in 1:nbins\n    IntXsec_eP[i] = QCDNUM.dsp_ints2(iaF_7, xbins_M_begin[i], xbins_M_end[i], \n        q2bins_M_begin[i], q2bins_M_end[i], 318., 4);\n    IntXsec_eM[i] = QCDNUM.dsp_ints2(iaF_8, xbins_M_begin[i], xbins_M_end[i], \n        q2bins_M_begin[i],q2bins_M_end[i], 318., 4);\nend \n\n# 1 for e-p and 0 for e+p\nePp = 0;\neMp = 1; \n     \nTM_eP = get_TM_elements(ePp);\nTM_eM = get_TM_elements(eMp);     \n\nK_eP = get_K_elements(ePp);\nK_eM = get_K_elements(eMp);\n\nnbins_out = size(TM_eP)[2];\n\nxsec_pred_eP = zeros(nbins_out);\nxsec_pred_eM = zeros(nbins_out);\n\nfor j in 1:nbins_out\n    \n    for i in 1:nbins\n    \n        xsec_pred_eP[j] += TM_eP[i, j] * (1.0/K_eP[i]) * IntXsec_eP[i];\n        xsec_pred_eM[j] += TM_eM[i, j] * (1.0/K_eM[i]) * IntXsec_eM[i];\n    \n    end\n    \nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"xsec_pred_eM","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A Bayesian approach to parton density extraction. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Hadrons, such as protons and neutrons, are made up of quarks held together by the strong force. At high energy scales, the valence quarks that define these hadrons exist in a sea of virtual quarks and gluons. The parton distribution functions (PDFs) describe this structure and are of fundamental importance to our understanding of quantum chromodynamics (QCD), as well as its application to LHC physics and the development of cosmic ray air showers in the Earth's atmosphere. PDFs can be extracted from accelerator measurements in which hadrons are probed through collisions with electrons. A limitation of existing approaches to analysing this data is the reliance on the chi-square statistic and the coupled assumption of Normal-distributed observations. We are working on a new statistical method for PDF extraction, which overcomes this limitation by forward modelling the problem from an input PDF to the expected number of events in a detector. This model will then be fit using Markov Chain Monte Carlo to enable inference of the PDF parameters. Our project builds on the QCDNUM software for fast QCD evolution and the Bayesian Analysis Toolkit developed at the ODSL to allow inference. We initially focus on the \"high-x\" regime, where the chi-square method cannot be used due to low event numbers.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"This package uses QCDNUM.jl for fast PDF evolution and cross-section calculation and BAT.jl for Bayesian inference.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To install PartonDensity.jl, start Julia and run","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pkg\njulia> pkg\"add https://github.com/cescalara/PartonDensity.jl.git\"","category":"page"},{"location":"#Development","page":"Introduction","title":"Development","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Below are the installation instruction for those who wish to contribute to the code.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Clone the github repository, e.g. via the command line:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"git clone  https://github.com/cescalara/QCDNUM.jl.git","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Enter the directory and start Julia interpreter","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"cd QCDNUM.jl\njulia","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Open the Julia package management environment pressing .","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ]","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Execute ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> generate QCDNUM\n...... \npkg>  . dev","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Exit the package manager using backspace or pressing Ctrl+C","category":"page"}]
}
